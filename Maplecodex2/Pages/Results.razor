@using Maplecodex2.Data
@using Maplecodex2.Data.Services
@using Maplecodex2.Data.Models
@using Maplecodex2.Data.Helpers
@using Maplecodex2.Database.Core
@using Microsoft.AspNetCore.Mvc

@inject ItemService ItemService
@inject IJSRuntime JSRuntime

<!-- Container results. -->
<div class="container">
    <div class="form-inline">
        <!-- Search -->
        <form class="unselectable">
            <span>Search: </span>

            <input id="searchInput" class="form-control mr-sm-2" @bind-value="@SearchValue" @bind-value:event="oninput" type="search" placeholder="Type id or name" aria-label="Search">

            <label style="padding-left: 1vh;">
                Show
                <select @bind="@PageSize" onselect="@OnClick()" aria-controls="ItemTable" class="form-inline input-sm">
                    <option value="10">10</option>
                    <option value="25">25</option>
                    <option value="50">50</option>
                </select>
            </label>

        </form>
    </div>
    <!-- Item Datatable -->
    <div style="width: auto;" id="ItemTable_Wrapper">
        <table class="table-shadow table table-responsive table-bordered dataTable dtr-inline justify-content-center" id="ItemTable">
            <thead>
                <tr role="row" class="unselectable">
                    <th class="bg-success" rowspan="1" colspan="1">Icon</th>
                    <th class="bg-success" rowspan="1" colspan="1">ID</th>
                    <th class="bg-success" rowspan="1" colspan="1">Slot</th>
                    <th class="bg-success" rowspan="1" colspan="1">Name</th>
                    <th class="bg-success" rowspan="1" colspan="1">Feature</th>
                    <th class="bg-success" rowspan="1" colspan="1">Type</th>
                </tr>
            </thead>
            <tbody id="itemTable">
                @foreach (Item newItem in ItemList)
                {
                    <tr role="row">
                        <DisplayIcon itemIcon="@newItem?.Icon" />
                        <td class="col-xs-1 unselectable uncopied" id="itemTableId">@newItem?.Id</td>
                        <td class="col-xs-1">@newItem?.Slot</td>
                        <td class="col-xs-5">@newItem?.Name</td>
                        <td class="col-xs-1">@newItem?.Feature</td>
                        <td class="col-xs-1">@newItem?.Type</td>
                    </tr>
                }
            </tbody>
        </table>
        <!-- Pagination -->
        <nav>
            <ul class="pagination pagination-sm justify-content-center">
                @foreach (PagingLink link in Links)
                {
                    <li @onclick="() => OnSelectedPage(link)" style="cursor: pointer;" class="page-item @(link.Hidden ? "hidden" : null) @(link.Active ? "active" : null) @(link.Enabled ? null : "disabled")">
                        <span style="@(char.IsDigit(link.Text, 0) ? "width: 4.5rem; text-align: center;" : null)" class="unselectable btn-toolbar" href="#">@link.Text</span>
                    </li>
                }
            </ul>
        </nav>
    </div>
</div>

@code {
    [BindProperty]
    public int PageSize { get; set; }
    public string? SearchValue { get; set; }

    public List<Item>? ItemList;
    public PagedList<Item>? PagedList;
    public List<PagingLink>? Links;
    public PagingLink? CurrentLink;

    // Initializer
    protected override async Task OnInitializedAsync()
    {
        SearchValue = "";
        PageSize = 10;
        PagedList = await ItemService.GetItemsPerPage(1, PageSize);
        if (PagedList == null)
        {
            return;
        }
        ItemList = PagedList.Items;
        Links = DataHelper.CreatePaginationLinks(PagedList, 5);
        CurrentLink = Links.First(t => t.Enabled);
    }

    // This is called by the pagination nav
    public async Task OnSelectedPage(PagingLink link)
    {
        if (link.Page == PagedList.CurrentPage || !link.Enabled || PagedList == null)
        {
            return;
        }

        CurrentLink = link;
        PagedList.CurrentPage = link.Page;
        PagedList = await DataHelper.GeneratePagedList(SearchValue, link, PageSize, ItemService);
        ItemList = PagedList.Items;
        Links.Clear();
        Links = DataHelper.CreatePaginationLinks(PagedList, 5);
    }

    public async Task OnClick()
    {
        Task<PagedList<Item>> result = DataHelper.GeneratePagedList(SearchValue, CurrentLink, PageSize, ItemService);
        PagedList = await result;
        if (PagedList == null)
        {
            return;
        }
        if (CurrentLink.Page > 1)
        {
            CurrentLink.Page = 1;
        }
        ItemList = PagedList.Items;
        Links.Clear();
        Links = DataHelper.CreatePaginationLinks(PagedList, 5);
    }
}